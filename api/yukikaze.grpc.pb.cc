// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: yukikaze.proto

#include "yukikaze.pb.h"
#include "yukikaze.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace yukikaze {

static const char* Encoder_method_names[] = {
  "/yukikaze.Encoder/Encode",
  "/yukikaze.Encoder/EncodeStatus",
  "/yukikaze.Encoder/EncodeCancel",
};

std::unique_ptr< Encoder::Stub> Encoder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Encoder::Stub> stub(new Encoder::Stub(channel, options));
  return stub;
}

Encoder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Encode_(Encoder_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EncodeStatus_(Encoder_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_EncodeCancel_(Encoder_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Encoder::Stub::Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::yukikaze::EncodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Encode_, context, request, response);
}

void Encoder::Stub::async::Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encode_, context, request, response, std::move(f));
}

void Encoder::Stub::async::Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Encode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>* Encoder::Stub::PrepareAsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::yukikaze::EncodeResponse, ::yukikaze::EncodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Encode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>* Encoder::Stub::AsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::yukikaze::StatusResponse>* Encoder::Stub::EncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::yukikaze::StatusResponse>::Create(channel_.get(), rpcmethod_EncodeStatus_, context, request);
}

void Encoder::Stub::async::EncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest* request, ::grpc::ClientReadReactor< ::yukikaze::StatusResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::yukikaze::StatusResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_EncodeStatus_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>* Encoder::Stub::AsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::yukikaze::StatusResponse>::Create(channel_.get(), cq, rpcmethod_EncodeStatus_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>* Encoder::Stub::PrepareAsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::yukikaze::StatusResponse>::Create(channel_.get(), cq, rpcmethod_EncodeStatus_, context, request, false, nullptr);
}

::grpc::Status Encoder::Stub::EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::yukikaze::CancelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::yukikaze::CancelRequest, ::yukikaze::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EncodeCancel_, context, request, response);
}

void Encoder::Stub::async::EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::yukikaze::CancelRequest, ::yukikaze::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncodeCancel_, context, request, response, std::move(f));
}

void Encoder::Stub::async::EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EncodeCancel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>* Encoder::Stub::PrepareAsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::yukikaze::CancelResponse, ::yukikaze::CancelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EncodeCancel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>* Encoder::Stub::AsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEncodeCancelRaw(context, request, cq);
  result->StartCall();
  return result;
}

Encoder::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encoder_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encoder::Service, ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Encoder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::yukikaze::EncodeRequest* req,
             ::yukikaze::EncodeResponse* resp) {
               return service->Encode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encoder_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Encoder::Service, ::yukikaze::StatusRequest, ::yukikaze::StatusResponse>(
          [](Encoder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::yukikaze::StatusRequest* req,
             ::grpc::ServerWriter<::yukikaze::StatusResponse>* writer) {
               return service->EncodeStatus(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Encoder_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Encoder::Service, ::yukikaze::CancelRequest, ::yukikaze::CancelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Encoder::Service* service,
             ::grpc::ServerContext* ctx,
             const ::yukikaze::CancelRequest* req,
             ::yukikaze::CancelResponse* resp) {
               return service->EncodeCancel(ctx, req, resp);
             }, this)));
}

Encoder::Service::~Service() {
}

::grpc::Status Encoder::Service::Encode(::grpc::ServerContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Encoder::Service::EncodeStatus(::grpc::ServerContext* context, const ::yukikaze::StatusRequest* request, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Encoder::Service::EncodeCancel(::grpc::ServerContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace yukikaze

