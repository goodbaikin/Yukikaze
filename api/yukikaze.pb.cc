// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: yukikaze.proto

#include "yukikaze.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace yukikaze {
        template <typename>
PROTOBUF_CONSTEXPR EncodeRequest::EncodeRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.input_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.output_name_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.encoder_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.encoder_option_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.service_id_)*/ 0u,
      /*decltype(_impl_.encoder_type_)*/ 0,
      /*decltype(_impl_.disable_chapter_)*/ false,
      /*decltype(_impl_.disable_delogo_)*/ false,
      /*decltype(_impl_.ignore_no_logo_)*/ false,
      /*decltype(_impl_.enable_subtitles_)*/ false,
      /*decltype(_impl_.ignore_no_drcsmap_)*/ false,
      /*decltype(_impl_.mpeg2_decoder_)*/ 0,
      /*decltype(_impl_.h264_decoder_)*/ 0,
      /*decltype(_impl_.cmoutmask_)*/ 0,
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct EncodeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodeRequestDefaultTypeInternal() {}
  union {
    EncodeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodeRequestDefaultTypeInternal _EncodeRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR EncodeResponse::EncodeResponse(::_pbi::ConstantInitialized) {}
struct EncodeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncodeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncodeResponseDefaultTypeInternal() {}
  union {
    EncodeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncodeResponseDefaultTypeInternal _EncodeResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR StatusRequest::StatusRequest(::_pbi::ConstantInitialized) {}
struct StatusRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusRequestDefaultTypeInternal() {}
  union {
    StatusRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusRequestDefaultTypeInternal _StatusRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR StatusResponse::StatusResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_.log_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_._cached_size_)*/ {},
    } {}
struct StatusResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatusResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatusResponseDefaultTypeInternal() {}
  union {
    StatusResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatusResponseDefaultTypeInternal _StatusResponse_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CancelRequest::CancelRequest(::_pbi::ConstantInitialized) {}
struct CancelRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelRequestDefaultTypeInternal() {}
  union {
    CancelRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelRequestDefaultTypeInternal _CancelRequest_default_instance_;
      template <typename>
PROTOBUF_CONSTEXPR CancelResponse::CancelResponse(::_pbi::ConstantInitialized) {}
struct CancelResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelResponseDefaultTypeInternal() {}
  union {
    CancelResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelResponseDefaultTypeInternal _CancelResponse_default_instance_;
}  // namespace yukikaze
static ::_pb::Metadata file_level_metadata_yukikaze_2eproto[6];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_yukikaze_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_yukikaze_2eproto = nullptr;
const ::uint32_t TableStruct_yukikaze_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.input_name_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.output_name_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.service_id_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.encoder_type_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.encoder_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.encoder_option_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.disable_chapter_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.disable_delogo_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.ignore_no_logo_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.enable_subtitles_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.ignore_no_drcsmap_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.mpeg2_decoder_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.h264_decoder_),
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeRequest, _impl_.cmoutmask_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::EncodeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::StatusRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::StatusResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::yukikaze::StatusResponse, _impl_.log_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::CancelRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::yukikaze::CancelResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::yukikaze::EncodeRequest)},
        {22, -1, -1, sizeof(::yukikaze::EncodeResponse)},
        {30, -1, -1, sizeof(::yukikaze::StatusRequest)},
        {38, -1, -1, sizeof(::yukikaze::StatusResponse)},
        {47, -1, -1, sizeof(::yukikaze::CancelRequest)},
        {55, -1, -1, sizeof(::yukikaze::CancelResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::yukikaze::_EncodeRequest_default_instance_._instance,
    &::yukikaze::_EncodeResponse_default_instance_._instance,
    &::yukikaze::_StatusRequest_default_instance_._instance,
    &::yukikaze::_StatusResponse_default_instance_._instance,
    &::yukikaze::_CancelRequest_default_instance_._instance,
    &::yukikaze::_CancelResponse_default_instance_._instance,
};
const char descriptor_table_protodef_yukikaze_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\016yukikaze.proto\022\010yukikaze\"\206\003\n\rEncodeReq"
    "uest\022\022\n\ninput_name\030\001 \001(\t\022\023\n\013output_name\030"
    "\002 \001(\t\022\022\n\nservice_id\030\003 \001(\r\022+\n\014encoder_typ"
    "e\030\004 \001(\0162\025.yukikaze.EncoderType\022\017\n\007encode"
    "r\030\r \001(\t\022\026\n\016encoder_option\030\016 \001(\t\022\027\n\017disab"
    "le_chapter\030\005 \001(\010\022\026\n\016disable_delogo\030\006 \001(\010"
    "\022\026\n\016ignore_no_logo\030\007 \001(\010\022\030\n\020enable_subti"
    "tles\030\010 \001(\010\022\031\n\021ignore_no_drcsmap\030\t \001(\010\022(\n"
    "\rmpeg2_decoder\030\n \001(\0162\021.yukikaze.Decoder\022"
    "\'\n\014h264_decoder\030\013 \001(\0162\021.yukikaze.Decoder"
    "\022\021\n\tcmoutmask\030\014 \001(\005\"\020\n\016EncodeResponse\"\017\n"
    "\rStatusRequest\"\035\n\016StatusResponse\022\013\n\003log\030"
    "\001 \001(\014\"\017\n\rCancelRequest\"\020\n\016CancelResponse"
    "**\n\007Decoder\022\013\n\007DEFAULT\020\000\022\007\n\003QSV\020\001\022\t\n\005CUV"
    "ID\020\002*Q\n\013EncoderType\022\010\n\004X264\020\000\022\010\n\004X265\020\001\022"
    "\n\n\006QSVENC\020\002\022\t\n\005NVENC\020\003\022\n\n\006VCEENC\020\004\022\013\n\007SV"
    "T_AV1\020\0052\324\001\n\007Encoder\022=\n\006Encode\022\027.yukikaze"
    ".EncodeRequest\032\030.yukikaze.EncodeResponse"
    "\"\000\022E\n\014EncodeStatus\022\027.yukikaze.StatusRequ"
    "est\032\030.yukikaze.StatusResponse\"\0000\001\022C\n\014Enc"
    "odeCancel\022\027.yukikaze.CancelRequest\032\030.yuk"
    "ikaze.CancelResponse\"\000b\006proto3"
};
static ::absl::once_flag descriptor_table_yukikaze_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_yukikaze_2eproto = {
    false,
    false,
    870,
    descriptor_table_protodef_yukikaze_2eproto,
    "yukikaze.proto",
    &descriptor_table_yukikaze_2eproto_once,
    nullptr,
    0,
    6,
    schemas,
    file_default_instances,
    TableStruct_yukikaze_2eproto::offsets,
    file_level_metadata_yukikaze_2eproto,
    file_level_enum_descriptors_yukikaze_2eproto,
    file_level_service_descriptors_yukikaze_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_yukikaze_2eproto_getter() {
  return &descriptor_table_yukikaze_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_yukikaze_2eproto(&descriptor_table_yukikaze_2eproto);
namespace yukikaze {
const ::google::protobuf::EnumDescriptor* Decoder_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_yukikaze_2eproto);
  return file_level_enum_descriptors_yukikaze_2eproto[0];
}
bool Decoder_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
const ::google::protobuf::EnumDescriptor* EncoderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_yukikaze_2eproto);
  return file_level_enum_descriptors_yukikaze_2eproto[1];
}
bool EncoderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}
// ===================================================================

class EncodeRequest::_Internal {
 public:
};

EncodeRequest::EncodeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:yukikaze.EncodeRequest)
}
EncodeRequest::EncodeRequest(const EncodeRequest& from) : ::google::protobuf::Message() {
  EncodeRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_name_){},
      decltype(_impl_.output_name_){},
      decltype(_impl_.encoder_){},
      decltype(_impl_.encoder_option_){},
      decltype(_impl_.service_id_){},
      decltype(_impl_.encoder_type_){},
      decltype(_impl_.disable_chapter_){},
      decltype(_impl_.disable_delogo_){},
      decltype(_impl_.ignore_no_logo_){},
      decltype(_impl_.enable_subtitles_){},
      decltype(_impl_.ignore_no_drcsmap_){},
      decltype(_impl_.mpeg2_decoder_){},
      decltype(_impl_.h264_decoder_){},
      decltype(_impl_.cmoutmask_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.input_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input_name().empty()) {
    _this->_impl_.input_name_.Set(from._internal_input_name(), _this->GetArenaForAllocation());
  }
  _impl_.output_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_output_name().empty()) {
    _this->_impl_.output_name_.Set(from._internal_output_name(), _this->GetArenaForAllocation());
  }
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoder().empty()) {
    _this->_impl_.encoder_.Set(from._internal_encoder(), _this->GetArenaForAllocation());
  }
  _impl_.encoder_option_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoder_option_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoder_option().empty()) {
    _this->_impl_.encoder_option_.Set(from._internal_encoder_option(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.service_id_, &from._impl_.service_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cmoutmask_) -
    reinterpret_cast<char*>(&_impl_.service_id_)) + sizeof(_impl_.cmoutmask_));

  // @@protoc_insertion_point(copy_constructor:yukikaze.EncodeRequest)
}
inline void EncodeRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.input_name_){},
      decltype(_impl_.output_name_){},
      decltype(_impl_.encoder_){},
      decltype(_impl_.encoder_option_){},
      decltype(_impl_.service_id_){0u},
      decltype(_impl_.encoder_type_){0},
      decltype(_impl_.disable_chapter_){false},
      decltype(_impl_.disable_delogo_){false},
      decltype(_impl_.ignore_no_logo_){false},
      decltype(_impl_.enable_subtitles_){false},
      decltype(_impl_.ignore_no_drcsmap_){false},
      decltype(_impl_.mpeg2_decoder_){0},
      decltype(_impl_.h264_decoder_){0},
      decltype(_impl_.cmoutmask_){0},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.input_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.input_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.output_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.output_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoder_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encoder_option_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encoder_option_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
EncodeRequest::~EncodeRequest() {
  // @@protoc_insertion_point(destructor:yukikaze.EncodeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void EncodeRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_name_.Destroy();
  _impl_.output_name_.Destroy();
  _impl_.encoder_.Destroy();
  _impl_.encoder_option_.Destroy();
}
void EncodeRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void EncodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:yukikaze.EncodeRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_name_.ClearToEmpty();
  _impl_.output_name_.ClearToEmpty();
  _impl_.encoder_.ClearToEmpty();
  _impl_.encoder_option_.ClearToEmpty();
  ::memset(&_impl_.service_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cmoutmask_) -
      reinterpret_cast<char*>(&_impl_.service_id_)) + sizeof(_impl_.cmoutmask_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* EncodeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 14, 0, 81, 2> EncodeRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294950912,  // skipmap
    offsetof(decltype(_table_), field_entries),
    14,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_EncodeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string input_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.input_name_)}},
    // string output_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.output_name_)}},
    // uint32 service_id = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodeRequest, _impl_.service_id_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.service_id_)}},
    // .yukikaze.EncoderType encoder_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodeRequest, _impl_.encoder_type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_type_)}},
    // bool disable_chapter = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodeRequest, _impl_.disable_chapter_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.disable_chapter_)}},
    // bool disable_delogo = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodeRequest, _impl_.disable_delogo_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.disable_delogo_)}},
    // bool ignore_no_logo = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodeRequest, _impl_.ignore_no_logo_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.ignore_no_logo_)}},
    // bool enable_subtitles = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodeRequest, _impl_.enable_subtitles_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.enable_subtitles_)}},
    // bool ignore_no_drcsmap = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(EncodeRequest, _impl_.ignore_no_drcsmap_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.ignore_no_drcsmap_)}},
    // .yukikaze.Decoder mpeg2_decoder = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodeRequest, _impl_.mpeg2_decoder_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.mpeg2_decoder_)}},
    // .yukikaze.Decoder h264_decoder = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodeRequest, _impl_.h264_decoder_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.h264_decoder_)}},
    // int32 cmoutmask = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EncodeRequest, _impl_.cmoutmask_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.cmoutmask_)}},
    // string encoder = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_)}},
    // string encoder_option = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_option_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string input_name = 1;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.input_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string output_name = 2;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.output_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 service_id = 3;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.service_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // .yukikaze.EncoderType encoder_type = 4;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool disable_chapter = 5;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.disable_chapter_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool disable_delogo = 6;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.disable_delogo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool ignore_no_logo = 7;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.ignore_no_logo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool enable_subtitles = 8;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.enable_subtitles_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool ignore_no_drcsmap = 9;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.ignore_no_drcsmap_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .yukikaze.Decoder mpeg2_decoder = 10;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.mpeg2_decoder_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .yukikaze.Decoder h264_decoder = 11;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.h264_decoder_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 cmoutmask = 12;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.cmoutmask_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string encoder = 13;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string encoder_option = 14;
    {PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.encoder_option_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\12\13\0\0\0\0\0\0\0\0\0\0\7\16\0"
    "yukikaze.EncodeRequest"
    "input_name"
    "output_name"
    "encoder"
    "encoder_option"
  }},
};

::uint8_t* EncodeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yukikaze.EncodeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string input_name = 1;
  if (!this->_internal_input_name().empty()) {
    const std::string& _s = this->_internal_input_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "yukikaze.EncodeRequest.input_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string output_name = 2;
  if (!this->_internal_output_name().empty()) {
    const std::string& _s = this->_internal_output_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "yukikaze.EncodeRequest.output_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 service_id = 3;
  if (this->_internal_service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_service_id(), target);
  }

  // .yukikaze.EncoderType encoder_type = 4;
  if (this->_internal_encoder_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_encoder_type(), target);
  }

  // bool disable_chapter = 5;
  if (this->_internal_disable_chapter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_disable_chapter(), target);
  }

  // bool disable_delogo = 6;
  if (this->_internal_disable_delogo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_disable_delogo(), target);
  }

  // bool ignore_no_logo = 7;
  if (this->_internal_ignore_no_logo() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_ignore_no_logo(), target);
  }

  // bool enable_subtitles = 8;
  if (this->_internal_enable_subtitles() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_enable_subtitles(), target);
  }

  // bool ignore_no_drcsmap = 9;
  if (this->_internal_ignore_no_drcsmap() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_ignore_no_drcsmap(), target);
  }

  // .yukikaze.Decoder mpeg2_decoder = 10;
  if (this->_internal_mpeg2_decoder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_mpeg2_decoder(), target);
  }

  // .yukikaze.Decoder h264_decoder = 11;
  if (this->_internal_h264_decoder() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_h264_decoder(), target);
  }

  // int32 cmoutmask = 12;
  if (this->_internal_cmoutmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<12>(
            stream, this->_internal_cmoutmask(), target);
  }

  // string encoder = 13;
  if (!this->_internal_encoder().empty()) {
    const std::string& _s = this->_internal_encoder();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "yukikaze.EncodeRequest.encoder");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string encoder_option = 14;
  if (!this->_internal_encoder_option().empty()) {
    const std::string& _s = this->_internal_encoder_option();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "yukikaze.EncodeRequest.encoder_option");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yukikaze.EncodeRequest)
  return target;
}

::size_t EncodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yukikaze.EncodeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_name = 1;
  if (!this->_internal_input_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_input_name());
  }

  // string output_name = 2;
  if (!this->_internal_output_name().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_output_name());
  }

  // string encoder = 13;
  if (!this->_internal_encoder().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_encoder());
  }

  // string encoder_option = 14;
  if (!this->_internal_encoder_option().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_encoder_option());
  }

  // uint32 service_id = 3;
  if (this->_internal_service_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_service_id());
  }

  // .yukikaze.EncoderType encoder_type = 4;
  if (this->_internal_encoder_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_encoder_type());
  }

  // bool disable_chapter = 5;
  if (this->_internal_disable_chapter() != 0) {
    total_size += 2;
  }

  // bool disable_delogo = 6;
  if (this->_internal_disable_delogo() != 0) {
    total_size += 2;
  }

  // bool ignore_no_logo = 7;
  if (this->_internal_ignore_no_logo() != 0) {
    total_size += 2;
  }

  // bool enable_subtitles = 8;
  if (this->_internal_enable_subtitles() != 0) {
    total_size += 2;
  }

  // bool ignore_no_drcsmap = 9;
  if (this->_internal_ignore_no_drcsmap() != 0) {
    total_size += 2;
  }

  // .yukikaze.Decoder mpeg2_decoder = 10;
  if (this->_internal_mpeg2_decoder() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mpeg2_decoder());
  }

  // .yukikaze.Decoder h264_decoder = 11;
  if (this->_internal_h264_decoder() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_h264_decoder());
  }

  // int32 cmoutmask = 12;
  if (this->_internal_cmoutmask() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_cmoutmask());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData EncodeRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    EncodeRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*EncodeRequest::GetClassData() const { return &_class_data_; }


void EncodeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<EncodeRequest*>(&to_msg);
  auto& from = static_cast<const EncodeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:yukikaze.EncodeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_input_name().empty()) {
    _this->_internal_set_input_name(from._internal_input_name());
  }
  if (!from._internal_output_name().empty()) {
    _this->_internal_set_output_name(from._internal_output_name());
  }
  if (!from._internal_encoder().empty()) {
    _this->_internal_set_encoder(from._internal_encoder());
  }
  if (!from._internal_encoder_option().empty()) {
    _this->_internal_set_encoder_option(from._internal_encoder_option());
  }
  if (from._internal_service_id() != 0) {
    _this->_internal_set_service_id(from._internal_service_id());
  }
  if (from._internal_encoder_type() != 0) {
    _this->_internal_set_encoder_type(from._internal_encoder_type());
  }
  if (from._internal_disable_chapter() != 0) {
    _this->_internal_set_disable_chapter(from._internal_disable_chapter());
  }
  if (from._internal_disable_delogo() != 0) {
    _this->_internal_set_disable_delogo(from._internal_disable_delogo());
  }
  if (from._internal_ignore_no_logo() != 0) {
    _this->_internal_set_ignore_no_logo(from._internal_ignore_no_logo());
  }
  if (from._internal_enable_subtitles() != 0) {
    _this->_internal_set_enable_subtitles(from._internal_enable_subtitles());
  }
  if (from._internal_ignore_no_drcsmap() != 0) {
    _this->_internal_set_ignore_no_drcsmap(from._internal_ignore_no_drcsmap());
  }
  if (from._internal_mpeg2_decoder() != 0) {
    _this->_internal_set_mpeg2_decoder(from._internal_mpeg2_decoder());
  }
  if (from._internal_h264_decoder() != 0) {
    _this->_internal_set_h264_decoder(from._internal_h264_decoder());
  }
  if (from._internal_cmoutmask() != 0) {
    _this->_internal_set_cmoutmask(from._internal_cmoutmask());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EncodeRequest::CopyFrom(const EncodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yukikaze.EncodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool EncodeRequest::IsInitialized() const {
  return true;
}

void EncodeRequest::InternalSwap(EncodeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.input_name_, lhs_arena,
                                       &other->_impl_.input_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.output_name_, lhs_arena,
                                       &other->_impl_.output_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoder_, lhs_arena,
                                       &other->_impl_.encoder_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encoder_option_, lhs_arena,
                                       &other->_impl_.encoder_option_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.cmoutmask_)
      + sizeof(EncodeRequest::_impl_.cmoutmask_)
      - PROTOBUF_FIELD_OFFSET(EncodeRequest, _impl_.service_id_)>(
          reinterpret_cast<char*>(&_impl_.service_id_),
          reinterpret_cast<char*>(&other->_impl_.service_id_));
}

::google::protobuf::Metadata EncodeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[0]);
}
// ===================================================================

class EncodeResponse::_Internal {
 public:
};

EncodeResponse::EncodeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:yukikaze.EncodeResponse)
}
EncodeResponse::EncodeResponse(const EncodeResponse& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  EncodeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:yukikaze.EncodeResponse)
}




const ::google::protobuf::Message::ClassData EncodeResponse::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*EncodeResponse::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata EncodeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[1]);
}
// ===================================================================

class StatusRequest::_Internal {
 public:
};

StatusRequest::StatusRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:yukikaze.StatusRequest)
}
StatusRequest::StatusRequest(const StatusRequest& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  StatusRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:yukikaze.StatusRequest)
}




const ::google::protobuf::Message::ClassData StatusRequest::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*StatusRequest::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata StatusRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[2]);
}
// ===================================================================

class StatusResponse::_Internal {
 public:
};

StatusResponse::StatusResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:yukikaze.StatusResponse)
}
StatusResponse::StatusResponse(const StatusResponse& from) : ::google::protobuf::Message() {
  StatusResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    _this->_impl_.log_.Set(from._internal_log(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:yukikaze.StatusResponse)
}
inline void StatusResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.log_){},
      /*decltype(_impl_._cached_size_)*/ {},
  };
  _impl_.log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.log_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
StatusResponse::~StatusResponse() {
  // @@protoc_insertion_point(destructor:yukikaze.StatusResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StatusResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.log_.Destroy();
}
void StatusResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void StatusResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:yukikaze.StatusResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.log_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StatusResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> StatusResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StatusResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // bytes log = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.log_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes log = 1;
    {PROTOBUF_FIELD_OFFSET(StatusResponse, _impl_.log_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* StatusResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yukikaze.StatusResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes log = 1;
  if (!this->_internal_log().empty()) {
    const std::string& _s = this->_internal_log();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yukikaze.StatusResponse)
  return target;
}

::size_t StatusResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yukikaze.StatusResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes log = 1;
  if (!this->_internal_log().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                    this->_internal_log());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StatusResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    StatusResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*StatusResponse::GetClassData() const { return &_class_data_; }


void StatusResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StatusResponse*>(&to_msg);
  auto& from = static_cast<const StatusResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:yukikaze.StatusResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_log().empty()) {
    _this->_internal_set_log(from._internal_log());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StatusResponse::CopyFrom(const StatusResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yukikaze.StatusResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StatusResponse::IsInitialized() const {
  return true;
}

void StatusResponse::InternalSwap(StatusResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.log_, lhs_arena,
                                       &other->_impl_.log_, rhs_arena);
}

::google::protobuf::Metadata StatusResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[3]);
}
// ===================================================================

class CancelRequest::_Internal {
 public:
};

CancelRequest::CancelRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:yukikaze.CancelRequest)
}
CancelRequest::CancelRequest(const CancelRequest& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  CancelRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:yukikaze.CancelRequest)
}




const ::google::protobuf::Message::ClassData CancelRequest::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*CancelRequest::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata CancelRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[4]);
}
// ===================================================================

class CancelResponse::_Internal {
 public:
};

CancelResponse::CancelResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
  // @@protoc_insertion_point(arena_constructor:yukikaze.CancelResponse)
}
CancelResponse::CancelResponse(const CancelResponse& from) : ::google::protobuf::internal::ZeroFieldsBase() {
  CancelResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:yukikaze.CancelResponse)
}




const ::google::protobuf::Message::ClassData CancelResponse::_class_data_ = {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl,
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl,
};
const ::google::protobuf::Message::ClassData*CancelResponse::GetClassData() const { return &_class_data_; }







::google::protobuf::Metadata CancelResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_yukikaze_2eproto_getter, &descriptor_table_yukikaze_2eproto_once,
      file_level_metadata_yukikaze_2eproto[5]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace yukikaze
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
