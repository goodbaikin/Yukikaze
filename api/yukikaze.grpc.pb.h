// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: yukikaze.proto
#ifndef GRPC_yukikaze_2eproto__INCLUDED
#define GRPC_yukikaze_2eproto__INCLUDED

#include "yukikaze.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace yukikaze {

class Encoder final {
 public:
  static constexpr char const* service_full_name() {
    return "yukikaze.Encoder";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::yukikaze::EncodeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>> AsyncEncode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>>(AsyncEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>> PrepareAsyncEncode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>>(PrepareAsyncEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::yukikaze::StatusResponse>> EncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::yukikaze::StatusResponse>>(EncodeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>> AsyncEncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>>(AsyncEncodeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>> PrepareAsyncEncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>>(PrepareAsyncEncodeStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::yukikaze::CancelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>> AsyncEncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>>(AsyncEncodeCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>> PrepareAsyncEncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>>(PrepareAsyncEncodeCancelRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void EncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest* request, ::grpc::ClientReadReactor< ::yukikaze::StatusResponse>* reactor) = 0;
      virtual void EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>* AsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::EncodeResponse>* PrepareAsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::yukikaze::StatusResponse>* EncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>* AsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::yukikaze::StatusResponse>* PrepareAsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>* AsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::yukikaze::CancelResponse>* PrepareAsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::yukikaze::EncodeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>> AsyncEncode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>>(AsyncEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>> PrepareAsyncEncode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>>(PrepareAsyncEncodeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::yukikaze::StatusResponse>> EncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::yukikaze::StatusResponse>>(EncodeStatusRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>> AsyncEncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>>(AsyncEncodeStatusRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>> PrepareAsyncEncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>>(PrepareAsyncEncodeStatusRaw(context, request, cq));
    }
    ::grpc::Status EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::yukikaze::CancelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>> AsyncEncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>>(AsyncEncodeCancelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>> PrepareAsyncEncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>>(PrepareAsyncEncodeCancelRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, std::function<void(::grpc::Status)>) override;
      void Encode(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EncodeStatus(::grpc::ClientContext* context, const ::yukikaze::StatusRequest* request, ::grpc::ClientReadReactor< ::yukikaze::StatusResponse>* reactor) override;
      void EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, std::function<void(::grpc::Status)>) override;
      void EncodeCancel(::grpc::ClientContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>* AsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yukikaze::EncodeResponse>* PrepareAsyncEncodeRaw(::grpc::ClientContext* context, const ::yukikaze::EncodeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::yukikaze::StatusResponse>* EncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request) override;
    ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>* AsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::yukikaze::StatusResponse>* PrepareAsyncEncodeStatusRaw(::grpc::ClientContext* context, const ::yukikaze::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>* AsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::yukikaze::CancelResponse>* PrepareAsyncEncodeCancelRaw(::grpc::ClientContext* context, const ::yukikaze::CancelRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Encode_;
    const ::grpc::internal::RpcMethod rpcmethod_EncodeStatus_;
    const ::grpc::internal::RpcMethod rpcmethod_EncodeCancel_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Encode(::grpc::ServerContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response);
    virtual ::grpc::Status EncodeStatus(::grpc::ServerContext* context, const ::yukikaze::StatusRequest* request, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* writer);
    virtual ::grpc::Status EncodeCancel(::grpc::ServerContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Encode() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncode(::grpc::ServerContext* context, ::yukikaze::EncodeRequest* request, ::grpc::ServerAsyncResponseWriter< ::yukikaze::EncodeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncodeStatus(::grpc::ServerContext* context, ::yukikaze::StatusRequest* request, ::grpc::ServerAsyncWriter< ::yukikaze::StatusResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncodeCancel(::grpc::ServerContext* context, ::yukikaze::CancelRequest* request, ::grpc::ServerAsyncResponseWriter< ::yukikaze::CancelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Encode<WithAsyncMethod_EncodeStatus<WithAsyncMethod_EncodeCancel<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Encode() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::yukikaze::EncodeRequest* request, ::yukikaze::EncodeResponse* response) { return this->Encode(context, request, response); }));}
    void SetMessageAllocatorFor_Encode(
        ::grpc::MessageAllocator< ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Encode(
      ::grpc::CallbackServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::yukikaze::StatusRequest, ::yukikaze::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::yukikaze::StatusRequest* request) { return this->EncodeStatus(context, request); }));
    }
    ~WithCallbackMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::yukikaze::StatusResponse>* EncodeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::yukikaze::CancelRequest, ::yukikaze::CancelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::yukikaze::CancelRequest* request, ::yukikaze::CancelResponse* response) { return this->EncodeCancel(context, request, response); }));}
    void SetMessageAllocatorFor_EncodeCancel(
        ::grpc::MessageAllocator< ::yukikaze::CancelRequest, ::yukikaze::CancelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::yukikaze::CancelRequest, ::yukikaze::CancelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncodeCancel(
      ::grpc::CallbackServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Encode<WithCallbackMethod_EncodeStatus<WithCallbackMethod_EncodeCancel<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Encode() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Encode() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncode(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncodeStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEncodeCancel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Encode() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Encode(context, request, response); }));
    }
    ~WithRawCallbackMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Encode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->EncodeStatus(context, request); }));
    }
    ~WithRawCallbackMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* EncodeStatus(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EncodeCancel(context, request, response); }));
    }
    ~WithRawCallbackMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EncodeCancel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Encode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Encode() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::yukikaze::EncodeRequest, ::yukikaze::EncodeResponse>* streamer) {
                       return this->StreamedEncode(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Encode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Encode(::grpc::ServerContext* /*context*/, const ::yukikaze::EncodeRequest* /*request*/, ::yukikaze::EncodeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncode(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yukikaze::EncodeRequest,::yukikaze::EncodeResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EncodeCancel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EncodeCancel() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::yukikaze::CancelRequest, ::yukikaze::CancelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::yukikaze::CancelRequest, ::yukikaze::CancelResponse>* streamer) {
                       return this->StreamedEncodeCancel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EncodeCancel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncodeCancel(::grpc::ServerContext* /*context*/, const ::yukikaze::CancelRequest* /*request*/, ::yukikaze::CancelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEncodeCancel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::yukikaze::CancelRequest,::yukikaze::CancelResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Encode<WithStreamedUnaryMethod_EncodeCancel<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_EncodeStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_EncodeStatus() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::yukikaze::StatusRequest, ::yukikaze::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::yukikaze::StatusRequest, ::yukikaze::StatusResponse>* streamer) {
                       return this->StreamedEncodeStatus(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_EncodeStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EncodeStatus(::grpc::ServerContext* /*context*/, const ::yukikaze::StatusRequest* /*request*/, ::grpc::ServerWriter< ::yukikaze::StatusResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedEncodeStatus(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::yukikaze::StatusRequest,::yukikaze::StatusResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_EncodeStatus<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Encode<WithSplitStreamingMethod_EncodeStatus<WithStreamedUnaryMethod_EncodeCancel<Service > > > StreamedService;
};

}  // namespace yukikaze


#endif  // GRPC_yukikaze_2eproto__INCLUDED
